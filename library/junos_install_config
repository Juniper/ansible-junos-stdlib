#!/usr/bin/env python2.7

# Copyright (c) 1999-2014, Juniper Networks Inc.
#               2014, Jeremy Schulman
#
# All rights reserved.
#
# License: Apache 2.0
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# * Neither the name of the Juniper Networks nor the
#   names of its contributors may be used to endorse or promote products
#   derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY Juniper Networks ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL Juniper Networks BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

DOCUMENTATION = '''
---
module: junos_install_config
author: Jeremy Schulman, Juniper Networks
version_added: "1.7.0"
short_description: Install Junos configuration file/snippet
description:
    - Install a complete Junos configuration (overwrite) or 
      merge a Junos configuration snippet onto the device.  The default
      behavior is to load/merge (overwrite='no').  This module will 
      perform an atomic lock/edit/unlock.  If the process fails at any step, 
      then the complete change is discarded.  The file contents can be in 
      the form of standard text, XML, or set statements.  The configuration
      can be loaded either via standard NETCONF, or via the CONSOLE port
      if the I(console) option is specified.
requirements:
    - py-junos-eznc >= 1.0.0
    - netconify, when I(console) option used
options:
    host:
        description:
            - should be {{ inventory_hostname }}
        required: False  
    user:
        description:
            - login user-name 
        required: False 
        default: $USER 
    passwd:
        description:
            - login password
        required: False 
        default: assumes ssh-key
    file:
        description:
            - path to file containing the Junos configuration content.  
              if the file has a B(*.conf) extension, it will be treated
              as "text" format.  If the file has a B(*.xml) extension, it
              will be treated as XML format.  If the file has a B(*.set)
              extension, it will be treated as a file of "set" commands. 
        required: True
    overwrite:
        description:
            - determines if the I(file) completely replaces the
              existing configuration   
        required: False 
        default: no
        choices: ['true','false','yes','no']
    timeout:
        description:
            - enables you to extend the NETCONF RPC timeout beyond
              the standard 30 seconds.  Set this value when you know
              the configuration change (commit) may take a long time
        required: False
        default: "0"
    logfile:
        description:
            - path on the local server where progress status is logged
              for debugging purposes
        required: False 
        default: None
    console:
        description:
            - port configuration per the B(netconify) utility
        required: False
        default: None
    savedir:
        description:
            - path to the local server directory where device facts and 
              inventory files will be stored. Used only with I(console) option.
              Refer to the B(netconify) utility for details.
        required: False 
        default: None
'''

import logging
from os.path import isfile

EXAMPLES = '''
# load-merge a change to the Junos config using NETCONF

- junos_install_config:
    host={{ inventory_hostname }}
    file=banner.conf

# load-overwrite a new config via CONSOLE port
- junos_install_config:
    host={{ inventory_hostname }}
    console="--telnet={{TERMSERV}},{{TERMSERV_PORT}}"
    file=default_new_switch.conf
    overwrite=yes
'''

import os
from jnpr.junos import Device
from jnpr.junos.exception import *
from jnpr.junos.utils.config import Config

def junos_install_config(module, dev):
    args = module.params
    cu = Config(dev)

    results = {}

    file_path = module.params['file']
    file_path = os.path.abspath( file_path )

    results['file'] = file_path
    results['changed'] = False
  
    logging.info("pushing file: {}".format(file_path))
    try:
        logging.info("taking lock")
        cu.lock()

        try:
        # load the config.  the cu.load will raise
        # an exception if there is even a warning.
        # so we want to avoid that condition.
            logging.info("loading config")    
            load_args = {'path': file_path}
            overwrite = module.boolean(module.params['overwrite'])
            if True == overwrite: load_args['overwrite'] = True
            cu.load(**load_args)
        except ValueError as err:
            logging.error("unable to load config:{}".format(err.message))
            raise err
        except Exception as err:
            if err.rsp.find('.//ok') is None:
                rpc_msg = err.rsp.findtext('.//error-message')
                logging.error("unable to load config:{}".format(rpc_msg))
            raise err
        else:
            pass

        diff = cu.diff()
        if diff is not None:
            logging.info("committing change, please be patient")    
            cu.commit()
            results['changed'] = True

        logging.info("unlocking")        
        cu.unlock()
        logging.info("change completed")    

    except LockError:
        results['failed'] = True
        msg = "Unable to lock configuration"
        results['msg'] = msg
        logging.error(msg)

    except CommitError:
        results['failed'] = True
        msg = "Unable to commit configuration"
        results['msg'] = msg
        logging.error(msg)

    except Exception as err:
        results['failed'] = True
        msg = "Unable to make changes"
        results['msg'] = msg
        logging.error(msg)

    return results

def _load_via_netconf(module):
    args = module.params

    logfile = args['logfile']
    if logfile is not None:
        logging.basicConfig(filename=logfile, level=logging.INFO,
          format='%(asctime)s:%(name)s:%(message)s')
        logging.getLogger().name = 'CONFIG:'+args['host']    

    logging.info("connecting to host: {}@{}".format(args['user'], args['host']))        

    try:
        dev = Device(args['host'], user=args['user'], password=args['passwd'])    
        dev.open()
    except Exception as err:
        msg = 'unable to connect to {}: {}'.format(args['host'], str(err))
        module.fail_json(msg=msg)
        return

    timeout = int(args['timeout'])
    if timeout > 0: dev.timeout = timeout
    results = junos_install_config(module, dev)
    dev.close()
    module.exit_json(**results)

def _load_via_console(module):
    from netconify.cmdo import netconifyCmdo    
    m_args = module.params

    c_args = []
    c_args.append(m_args['console'])
    c_args.append('--file=' + m_args['file'])
    if m_args['savedir'] is not None:
        c_args.append('--savedir='+m_args['savedir'])
    c_args.append('--user='+m_args['user'])        
    if m_args['passwd'] is not None:
        c_args.append('--passwd='+m_args['passwd'])

    # the default mode for loading a config via the console
    # is to load-overwrite.  So we need to check the module
    # option and set the "--merge" option if overwrite is False

    overwrite = module.boolean(module.params['overwrite'])    
    if overwrite is False:
        c_args.append('--merge')

    c_args.append(m_args['host'])

    logfile = m_args['logfile']
    if logfile is not None:
        logging.basicConfig(filename=logfile, level=logging.INFO,
            format='%(asctime)s:%(name)s:%(message)s')
        logging.getLogger().name = 'NETCONIFY:'+m_args['host']
        def log_notify(event,message):
            logging.info("%s:%s"%(event,message))
        use_notifier = log_notify
    else:
        def silent_notify(event,message): pass
        use_notifier = silent_notify

    nc = netconifyCmdo(notify=use_notifier)
    c_results = nc.run( c_args )
    m_results = dict(changed=c_results['changed'])
    if c_results['failed'] is True:
        module.fail_json(msg=c_results['errmsg'])
    else:
        module.exit_json(**m_results)

### ---------------------------------------------------------------------------
### MAIN
### ---------------------------------------------------------------------------

def main():
    module = AnsibleModule(
        argument_spec = dict(
            host=dict(required=True),
            user=dict(required=False, default=os.getenv('USER')),
            passwd=dict(required=False, default=None),
            console=dict(required=False, default=None),            
            file=dict(required=True),
            overwrite=dict(required=False, choices=BOOLEANS, default=False),
            logfile=dict(required=False, default=None),
            savedir=dict(required=False),            
            timeout=dict(required=False, default=0)),
        supports_check_mode = False )

    args = module.params

    # ------------------------------
    # make sure file actually exists
    # ------------------------------

    if not isfile(args['file']):
        module.fail_json(msg="file not found: {}".format(args['file']))
        return

    _ldr = _load_via_netconf if args['console'] is None else _load_via_console
    _ldr(module)

from ansible.module_utils.basic import *
main()

