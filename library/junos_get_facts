#!/usr/bin/env python

# Copyright (c) 1999-2014, Juniper Networks Inc.
#               2014, Jeremy Schulman
#
# All rights reserved.
#
# License: Apache 2.0
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# * Neither the name of the Juniper Networks nor the
#   names of its contributors may be used to endorse or promote products
#   derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY Juniper Networks, Inc. ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL Juniper Networks, Inc. BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

DOCUMENTATION = '''
---
module: junos_get_facts
author: Jeremy Schulman, Juniper Networks
version_added: "1.0.0"
short_description: Retrieve facts for a device running Junos OS.
description:
    - Retrieve facts for a device running Junos OS, which includes information
      such as the serial number, product model, and Junos OS version.
      The module supports using both NETCONF and CONSOLE-based retrieval
      and returns the information as a JSON dictionary.
      The information is similar to facts gathered by other IT frameworks.
requirements:
    - junos-eznc >= 1.2.2
    - junos-netconify >= 1.0.1, when using the I(console) option
options:
    host:
        description:
            - Set to {{ inventory_hostname }}
        required: true
    user:
        description:
            - Login username
        required: false
        default: $USER
    passwd:
        description:
            - Login password
        required: false
        default: assumes ssh-key active
    console:
        description:
            - CONSOLE port, per the B(netconify) utility
        required: false
        default: None
    savedir:
        description:
            - Path to the local server directory where device fact
              files will be stored. Resulting file will be
              I(savedir/hostname-facts.json)
        required: false
        default: $CWD
    logfile:
        description:
            - Path on the local server where the progress status is logged
              for debugging purposes. This option is used only with the
              I(console) option.
        required: false
        default: None
    port:
        description:
            - port number to use when connecting to the device
        required: false
        default: 830
    ssh_private_key_file:
        description:
            - This can be used if you need to provide a private key rather than
              loading the key into the ssh-key-ring/environment.  if your
              ssh-key requires a password, then you must provide it via
              **passwd**
        required: false
        default: None
    mode:
        description:
            - mode of console connection (telnet/serial). If mode is not
              provided SSH connection is used.
        required: false
        default: None
'''

EXAMPLES = '''
# retrieve facts using NETCONF, assumes ssh-keys

- junos_get_facts: host={{ inventory_hostname }}
  register: junos

# retrieve facts using CONSOLE, assumes Amnesiac system
# root login, no password

- junos_get_facts:
    host={{ inventory_hostname }}
    user=root
    console="--telnet={{TERMSERV}},{{TERMSERVPORT}}"
    savedir=/usr/local/junos/inventory
  register: junos

# access the facts

- name: version
  debug: msg="{{ junos.facts.version }}"

# retrieve facts using console server connection using PyEZ >= 2.0

- junos_get_facts:
    host={{ inventory_hostname }}
    mode="telnet"
    port=7016
  register: junos

# access the facts

- name: version
  debug: msg="{{ junos.facts }}"
'''

import os
import json
from distutils.version import LooseVersion

def main():
    module = AnsibleModule(
        argument_spec=dict(
            host=dict(required=True),
            console=dict(required=False, default=None),
            logfile=dict(required=False, default=None),
            savedir=dict(required=False, default=None),
            user=dict(required=False, default=os.getenv('USER')),
            passwd=dict(required=False, default=None, no_log=True),
            port=dict(required=False, default=830),
            ssh_private_key_file=dict(required=False, default=None),
            mode=dict(required=False, default=None)),
        supports_check_mode=True)

    m_args = module.params
    m_results = dict(changed=False)

    if m_args['console'] is None:
        try:
            from jnpr.junos import Device
            from jnpr.junos.version import VERSION
            if not LooseVersion(VERSION) >= LooseVersion('2.1.2'):
                module.fail_json(msg='junos-eznc >= 2.1.2 is required for this '
                                     'module')
        except ImportError as ex:
            module.fail_json(msg='ImportError: %s' % ex.message)

        # -----------
        # via NETCONF
        # -----------
        dev = Device(m_args['host'], user=m_args['user'], passwd=m_args['passwd'], port=m_args['port'],
                     ssh_private_key_file=m_args['ssh_private_key_file'], mode=m_args['mode'],
                     gather_facts=True)
        try:
            dev.open()
        except Exception as err:
            msg = 'unable to connect to {0}: {1}'.format(m_args['host'], str(err))
            module.fail_json(msg=msg)
            return
        else:
            # Ansible 2 doesn't like custom objects in the return value, and
            # PyEZ facts are now a custom object rather than a true dict.
            # Since facts are read-only, we must begin by copying facts into a
            # dict. Also, since PyEZ facts are now "on-demand", this must be
            # done before closing the connection. These changes remain backwards
            # compatible with older PyEZ versions that have older fact gathering
            # code.
            m_results['facts'] = dict(dev.facts)
            m_results['facts']['re_name'] = dev.re_name
            m_results['facts']['master_state'] = dev.master
            dev.close()
            # Ansible doesn't allow keys starting with numbers.
            # Replace the '2RE' key with the 'has_2RE' key.
            if '2RE' in m_results['facts']:
                m_results['facts']['has_2RE'] = m_results['facts']['2RE']
                del m_results['facts']['2RE']
            # The value of the 'version_info' key is a custom junos.version_info
            # object. Convert this value to a dict.
            if 'version_info' in m_results['facts']:
                m_results['facts']['version_info'] = dict(
                    m_results['facts']['version_info'])
            # The values of the ['junos_info'][re_name]['object'] keys are
            # custom junos.version_info objects. Convert all of these to dicts.
            if 'junos_info' in m_results['facts']:
                for key in m_results['facts']['junos_info']:
                    m_results['facts']['junos_info'][key]['object'] = dict(
                        m_results['facts']['junos_info'][key]['object'])
            if m_args['savedir'] is not None:
                fname = "{0}/{1}-facts.json".format(m_args['savedir'], dev.facts['hostname'])
                with open(fname, 'w') as factfile:
                    json.dump(m_results['facts'], factfile)
    else:
        # -----------
        # via CONSOLE
        # -----------
        try:
            from netconify.cmdo import netconifyCmdo
            from netconify.constants import version
            if not LooseVersion(version) >= LooseVersion('1.0.1'):
                module.fail_json(msg='junos-netconify >= 1.0.1 is required for this module')
        except ImportError:
            module.fail_json(msg='junos-netconify >= 1.0.1 is required for this module')
        import logging

        c_args = []
        c_args.append(m_args['console'])
        c_args.append('--facts')
        if m_args['savedir'] is not None:
            c_args.append('--savedir=' + m_args['savedir'])
        c_args.append('--user=' + m_args['user'])
        if m_args['passwd'] is not None:
            c_args.append('--passwd=' + m_args['passwd'])

        c_args.append(m_args['host'])

        logfile = m_args['logfile']
        if logfile is not None:
            logging.basicConfig(filename=logfile, level=logging.INFO,
                                format='%(asctime)s:%(name)s:%(message)s')
            logging.getLogger().name = 'NETCONIFY:' + module.params['host']

            def log_notify(self, event, message):
                logging.info("%s:%s" % (event, message))
            use_notifier = log_notify
        else:
            def silent_notify(self, event, message):
                pass
            use_notifier = silent_notify

        try:
            nc = netconifyCmdo(notify=use_notifier)
            c_results = nc.run(c_args)
        except Exception as err:
            module.fail_json(msg=str(err))
        m_results['args'] = m_args        # for debug
        m_results['facts'] = c_results['facts']

    module.exit_json(**m_results)

from ansible.module_utils.basic import *

if __name__ == '__main__':
    main()
