---
- name: Test juniper.device.rpc module
  hosts: all
  gather_facts: false

  tasks:
################
    - name: "Execute single RPC get-software-information without any kwargs"
      juniper.device.rpc:
        rpcs:
          - "get-software-information"
      register: test1
      ignore_errors: true
      tags: [test1]

    - name: Check TEST 1
      ansible.builtin.assert:
        that:
          - test1.msg == "The RPC executed successfully."
      tags: [test1]
#################
    - name: "Get Device Configuration with dest"
      juniper.device.rpc:
        rpc: get-config
        dest: get_config.conf
      register: test2
      ignore_errors: true
      tags: [test2]

    - name: Check that the get_config.conf exists
      ansible.builtin.stat:
        path: get_config.conf
      register: stat_result

    - name: Check TEST 2
      ansible.builtin.assert:
        that:
          - test2.msg == "The \"get-config\" RPC executed successfully."
          - stat_result.stat.exists == True
      tags: [test2]

    - name: Clean up TEST 2
      ansible.builtin.file:
        path: get_config.conf
        state: absent
#################

    - name: "Get Device Configuration in text"
      juniper.device.rpc:
        rpc: get-interface-information
        kwargs:
          interface_name: "lo0.0"
        format: text
      register: test3
      ignore_errors: true
      tags: [test3]

    - name: Check TEST 3
      ansible.builtin.assert:
        that:
          - test3.msg == "The RPC executed successfully."
      tags: [test3]

#################

    - name: "Execute multiple RPCs without any kwargs"
      juniper.device.rpc:
        rpcs:
          - "get-software-information"
          - "get-interface-information"
        dest: get_config.conf
      register: test4
      ignore_errors: true
      tags: [test4]

    - name: Check TEST 4
      ansible.builtin.assert:
        that:
          - test4.results[0].msg == "The RPC executed successfully."
          - test4.results[1].msg == "The RPC executed successfully."
      tags: [test4]

    - name: Clean up TEST 4
      ansible.builtin.file:
        path: get_config.conf
        state: absent

#################

    - name: "Execute multiple RPCs with multiple kwargs"
      juniper.device.rpc:
        rpcs:
          - "get-software-information"
          - "get-interface-information"
        kwargs:
          - {}
          - interface_name: "lo0.0"
      register: test5
      ignore_errors: true
      tags: [test5]

    - name: Check TEST 5
      ansible.builtin.assert:
        that:
          - test5.results[0].msg == "The RPC executed successfully."
          - test5.results[1].msg == "The RPC executed successfully."
      tags: [test5]

#################
    - name: Creates directory
      ansible.builtin.file:
        path: out
        state: directory
        mode: '0644'

    - name: "Execute multiple RPCs with multiple kwargs and dest-dir"
      juniper.device.rpc:
        rpcs:
          - "get-software-information"
          - "get-interface-information"
        kwargs:
          - {}
          - interface_name: "lo0.0"
        dest_dir: "out"
      register: test6
      ignore_errors: true
      tags: [test6]

    - name: Check get-interface-information.xml exists
      ansible.builtin.stat:
        path: "out/{{ inventory_hostname }}_get-interface-information.xml"
      register: stat_result_1

    - name: Check get-software-information.xml exists
      ansible.builtin.stat:
        path: "out/{{ inventory_hostname }}_get-software-information.xml"
      register: stat_result_2

    - name: Check TEST 6
      ansible.builtin.assert:
        that:
          - test6.results[0].msg == "The RPC executed successfully."
          - test6.results[1].msg == "The RPC executed successfully."
          - stat_result_1.stat.exists == True
          - stat_result_2.stat.exists == True
      tags: [test6]

    - name: Clean up TEST 6
      ansible.builtin.file:
        path: out
        state: absent

#################
    - name: Get Device Configuration for interface
      juniper.device.rpc:
        rpc: get-config
        filter_xml: "<configuration><interfaces/></configuration>"
      register: test7
      ignore_errors: true
      tags: [test7]

    - name: Check TEST 7
      ansible.builtin.assert:
        that:
          - test7.msg == "The \"get-config\" RPC executed successfully."
      tags: [test7]

#################
    - name: "Execute wrong RPC to generate RPC error"
      juniper.device.rpc:
        rpcs:
          - "wrong-rpc"
      register: test8
      ignore_errors: true
      tags: [test8]

    - name: Check TEST 8
      ansible.builtin.assert:
        that:
          - '"Unable to execute the RPC" or "MODULE FAILURE" in test8.msg'
      tags: [test8]

#################
    - name: "Check configuration for errors"
      juniper.device.rpc:
        rpcs:
          - "load-configuration"
        attrs:
          - action: 'set'
            format: 'text'
        kwargs:
          - configuration_set: 'set system syslog file test1 any any'
      register: test9
      tags: [test9]

    - name: Check TEST 9
      ansible.builtin.debug:
        var: test9
      tags: [test9]

    - name: Check TEST 9
      ansible.builtin.assert:
        that:
          - test9.msg == "The RPC executed successfully."
      tags: [test9]

#################
    - name: "Check huge xml/text data"
      juniper.device.rpc:
        rpcs:
          - get-support-information
          - file-archive
        kwargs:
          - {}
          - destination: "support_info"
            source: /var/log/*
            compress: true
        formats: text
        timeout: 1200
        huge_tree: true
      register: test10
      tags: [test10]

    - name: Check TEST 10
      ansible.builtin.assert:
        that:
          test10.results[0].msg == "The RPC executed successfully."
      tags: [test10]

#####################
    - name: Check rollback info
      juniper.device.rpc:
        rpc: get-rollback-information
        kwargs:
          rollback: "3"
          compare: "2"
      register: test11
      tags: [test11]

    - name: Check TEST 11
      ansible.builtin.assert:
        that:
          test11.msg == "The RPC executed successfully."
      tags: [test11]

####################
    - name: Check rollback info with boolean values
      juniper.device.rpc:
        rpc: get-rollback-information
        kwargs:
          allow_bool_values: "0"
          rollback: "1"
          compare: "0"
      register: test12
      tags: [test12]

    - name: Check TEST 12
      ansible.builtin.assert:
        that:
          test12.msg == "The RPC executed successfully."
      tags: [test12]
#################
    - name: "Execute single RPC get-software-information with format JSON"
      juniper.device.rpc:
        rpcs:
          - "get-software-information"
        format: json
      register: test13
      ignore_errors: true
      tags: [test13]

    - name: Check TEST 13
      ansible.builtin.assert:
        that:
          - test1.msg == "The RPC executed successfully."
      tags: [test13]

   #################

    - name: TEST 14 - RPC with ignore_warning
      juniper.device.rpc:
        rpcs:
          - get-software-information
        ignore_warning: true
      register: test14
      tags: [test14]

    - name: Check TEST 14
      ansible.builtin.assert:
        that:
          - test14.msg == "The RPC executed successfully."
      tags: [test14]

    #################
    
    - name: Ensure logdir exists
      ansible.builtin.file:
        path: "{{ playbook_dir }}/rpc_logs"
        state: directory
        mode: "0755"
      delegate_to: localhost
      run_once: true
      tags: [test15]

    - name: TEST 15 - RPC with logdir
      juniper.device.rpc:
        rpcs:
          - get-software-information
        logdir: "{{ playbook_dir }}/rpc_logs"
      register: test15
      tags: [test15]

    - name: Check TEST 15 log file
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/rpc_logs/{{ inventory_hostname }}.log"
      register: stat_result_log15
      delegate_to: localhost

    - name: Clean up logdir
      ansible.builtin.file:
        path: "{{ playbook_dir }}/rpc_logs"
        state: absent
      delegate_to: localhost
      run_once: true
      tags: [test15]

    #################

    - name: Ensure output directory exists for TEST 16
      ansible.builtin.file:
        path: "{{ playbook_dir }}/rpc_output"
        state: directory
        mode: '0755'
      delegate_to: localhost
      run_once: true
      tags: [test16]

    - name: TEST 16 - RPC with return_output false and dest_dir
      juniper.device.rpc:
        rpcs:
          - get-software-information
        return_output: false
        dest_dir: "{{ playbook_dir }}/rpc_output"
      register: test16
      tags: [test16]

    - name: Assert TEST 16 has no output returned
      ansible.builtin.assert:
        that:
          - test16.stdout is not defined
      tags: [test16]

    - name: Clean up TEST 16 output dir
      ansible.builtin.file:
        path: "{{ playbook_dir }}/rpc_output"
        state: absent
      delegate_to: localhost
      run_once: true
      tags: [test16]
    
    #################

    - name: TEST 17 - RPC with attrs (attribute applied without kwargs)
      juniper.device.rpc:
        rpcs:
          - get-config
        attrs:
          format: text
        filter: "<configuration><interfaces/></configuration>"
      register: test17
      tags: [test17]

    - name: Check TEST 17
      ansible.builtin.assert:
        that:
          - test17.stdout is defined
          - "'<configuration' in test17.stdout"
      tags: [test17]

    #################

    - name: TEST 18 - RPCs with different formats
      juniper.device.rpc:
        rpcs:
          - get-software-information
          - get-interface-information
        kwargs:
          - {}
          - interface_name: lo0.0
        formats:
          - xml
          - text
      register: test18
      tags: [test18]

    - name: Check TEST 18
      ansible.builtin.assert:
        that:
          - test18.results[0].msg == "The RPC executed successfully."
          - test18.results[1].msg == "The RPC executed successfully."
      tags: [test18]
   
