#!/usr/bin/env python2.7
# Copyright (c) 1999-2014, Juniper Networks Inc.
#               2014, Jeremy Schulman
#
# All rights reserved.
#
# License: Apache 2.0
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# * Neither the name of the Juniper Networks nor the
#   names of its contributors may be used to endorse or promote products
#   derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY Juniper Networks ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL Juniper Networks BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

DOCUMENTATION = '''
---
module: junos_console_devicemode
author: Jeremy Schulman, Juniper Networks
version_added: "1.5.0"
short_description: Change the operational device mode
description:
    - New Out of Box (NOOB) console configuration that will change the "device mode". 
      For QFX devices in QFabric deployments, the QFX switch must be 
      configured into 'node' mode. This action is performed over the device 
      CONSOLE port using either a SERIAL-PORT or a TERMINAL-SERVER. 
      This action will also log the device "facts" and "inventory" to a 
      local server directory, which then provdies you with specific details 
      about the device located on that console. Refer to netconify for 
      further details on this process.
requirements:
    - netconify
options:
    host:
        description:
            - should be {{ inventory_hostname }}
        required: true  
    user:
        description:
            - login user-name 
        required: false 
        default: root 
    passwd:
        description:
            - login password
        required: false 
        default: None   
    console:
        description:
            - CONSOLE port, per the B(netconify) utility
        required: true
        default: None
    qfx:
        description:
            - determine the QFX device mode
        required: true
        choices: ['node','switch']
        default: None
    logfile:
        description:
            - path on the local server where progress status is logged
              for debugging purposes
        required: false 
        default: None
    savedir:
        description:
            - path to the local server directory where device facts and 
              inventory files will be stored. Refer to the B(netconify) 
              utility for details.  If the path is not explicit, it will
              be local to the playbook execution directory
        required: false 
        default: None
'''

EXAMPLES = '''
- junos_console_devicemode:
    host={{ inventory_hostname }}
    console='-t={{TERMSERV}},{{TERMSERVPORT}}'
    qfx=node
    logfile=/usr/local/junos/logs/qfx_node.log
    savedir=/usr/local/junos/inventory
'''

import sys
import logging

from netconify.cmdo import *

def main():
  module = AnsibleModule(
    argument_spec = dict(
      host=dict(required=True),
      console=dict(required=True),
      qfx=dict(required=False, default=None, choices=['node','switch']),
      logfile=dict(required=False, default=None),
      savedir=dict(required=False),
      user=dict(required=False, default='root'),
      passwd=dict(required=False, default=None)
    ),
    supports_check_mode = False )

  # -----------------------------------------------
  # build the command args to the netconify utility
  # -----------------------------------------------

  m_args = module.params
  c_args = []  # for netconify
  gather_facts = False

  c_args.append(m_args['console'])
  if m_args['qfx'] is not None:
    c_args.append('--qfx-'+m_args['qfx'])
  if m_args['savedir'] is not None:
    # gather facts and save them to local filesys
    gather_facts = True
    c_args.append('--facts')
    c_args.append('--savedir='+m_args['savedir'])
  c_args.append('--user='+m_args['user'])
  if m_args['passwd'] is not None:
    c_args.append('--passwd='+m_args['passwd'])

  # the final arg should be the name we designate to this device.  
  c_args.append(m_args['host'])  

  logfile = m_args['logfile']
  if logfile is not None:
    logging.basicConfig(filename=logfile, level=logging.INFO,
      format='%(asctime)s:%(name)s:%(message)s')
    logging.getLogger().name = 'NETCONIFY:'+m_args['host']
    def log_notify(event,message):
      log_notify.event = event
      log_notify.message = message
      logging.info("%s:%s"%(event,message))
    use_notifier = log_notify
  else:
    def silent_notify(event,message): pass
    use_notifier = silent_notify

  nc = netconifyCmdo(notify=use_notifier)
  c_results = nc.run( c_args )

  m_results = dict(changed=c_results['changed'])
  m_results['args'] = m_args  # just for debug really.
  if gather_facts is True:
    m_results['facts'] = c_results['facts']

  if c_results['failed'] is True:
    module.fail_json(msg=c_results['errmsg'])
  else:
    module.exit_json(**m_results)

from ansible.module_utils.basic import *
main()

