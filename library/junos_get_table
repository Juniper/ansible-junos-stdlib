DOCUMENTATION = '''
---
options:
    table:
        description:
            - Name of PyEZ Table
        required: false
        default: None
    file:
        description:
            - YAML file that has the table specified in table parameter
        required: false
        default: None
    path:
        description:
            - Path of location of the YAML file
        required: false
        default: op directory in jnpr.junos.op
    response_type:
        description:
            - Option to change how data is returned from the
              module.  Either list of dictionaries or the
              Juniper PyEZ default (list of tuples, which becomes
              lists by the time it gets to Ansible)
        required: false
        options: ['list_of_dicts', 'juniper_items']
        default: list_of_dicts

'''

EXAMPLES = '''
# GET NEIGHBOR INFO USING STD LLDP TABLE
- junos_get_table: table=LLDPNeighborTable file=lldp.yml host={{ inventory_hostname }} user={{ un }} passwd={{ pwd }}

# GET NEIGHBOR INFO USING CUSTOM LLDP TABLE IN CUSTOM PATH
- junos_get_table: table=NTCNeighborTable path=tables/ file=ntclldp.yaml host={{ inventory_hostname }} user={{ un }} passwd={{ pwd }}

#
- name: Table/View example via console server connection using PyEZ >= 2.0
  junos_get_table:
    table=RouteTable
    file=routes.yml
    host={{ inventory_hostname }}
    port=7016
    mode='telnet'
'''

RETURN = '''
resource:
    description: Dictionary of facts
    returned: always
    type: list of dictionaries or list of tuples (default items from PyEZ)
    sample:
        [
            {
                "neighbor_interface": "fxp0",
                "local_interface": "fxp0",
                "neighbor": "vmx2"
            },
            {
                "neighbor_interface": "ge-0/0/2",
                "local_interface": "ge-0/0/2",
                "neighbor": "vmx2"
            },
            {
                "neighbor_interface": "fxp0",
                "local_interface": "fxp0",
                "neighbor": "vmx3"
            }
        ]

'''

import os
from lxml import etree
from lxml.builder import E
import yaml

TABLE_PATH = os.path.dirname(os.path.abspath(tables_dir.__file__))
CHOICES = ['list_of_dicts', 'juniper_items']


def juniper_items_to_list_of_dicts(data):
    """Convert Juniper PyEZ Table/View items to list of dictionaries
    """

    list_of_resources = []
    # data.items() is a list of tuples
    for table_key, table_fields in data.items():
        # sample:
        # ('fxp0', [('neighbor_interface', '1'), ('local_interface', 'fxp0'),
        # ('neighbor', 'vmx2')]
        # table_key - element 0 is the key from the Table - not using at all
        # table_fields - element 1 is also a list of uples
        temp = {}
        for normalized_key, normalized_value in table_fields:
            # calling it normalized value because YOU/WE created the keys
            if normalized_value and not isinstance(normalized_value, (str, list, int, dict)):
                normalized_value = juniper_items_to_list_of_dicts(normalized_value)
            temp[normalized_key] = normalized_value
        list_of_resources.append(temp)
    return list_of_resources


def main():

    module = AnsibleModule(
        argument_spec=dict(file=dict(required=True, default=None),
                           table=dict(required=True, default=None),
                           path=dict(required=False, default=TABLE_PATH),
                           response_type=dict(choices=CHOICES,
                                              default='list_of_dicts')
                           ),
        supports_check_mode=False)

    args = module.params
    response_type = args['response_type']

    if not args['file'].endswith('.yml'):
        module.fail_json(msg='file must end with .yml extension')


    resource = []
    try:
        file_name = os.path.join(args['path'], args['file'])
        try:
            globals().update(FactoryLoader().load(
                yaml.load(open(file_name).read())))
        except IOError as err:
            module.fail_json(msg='Unable to find file: {0}'.format(file_name))
        logging.info("Getting data from device")
        try:
            data = globals()[args['table']](dev)
        except KeyError:
            module.fail_json(msg='Unable to find Table in provided yaml file',
                             table=args['table'], file=file_name)
        data.get()
        if response_type == 'list_of_dicts':
            resource = juniper_items_to_list_of_dicts(data)
        else:
            resource = data.items()
    except Exception as err:
        msg = 'Uncaught exception - please report: {0}'.format(str(err))
        logging.error(msg)
        module.fail_json(msg=msg)

    module.exit_json(resource=resource)
