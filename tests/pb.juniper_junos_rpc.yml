---
- name: Test juniper.device.rpc module
  hosts: all
  connection: local
  gather_facts: no
  collections:
    - juniper.device

  tasks:
#################
    - name: "Execute single RPC get-software-information without any kwargs"
      rpc:
        rpcs:
          - "get-software-information"
      register: test1
      ignore_errors: True
      tags: [ test1 ]

    - name: Check TEST 1
      assert:
        that:
          - test1.msg == "The RPC executed successfully."
      tags: [ test1 ]

#################
    - name: "Get Device Configuration with dest"
      rpc:
        rpc: get-config
        dest: get_config.conf
      register: test2
      ignore_errors: True
      tags: [ test2 ]

    - name: Check that the get_config.conf exists
      stat:
        path: get_config.conf
      register: stat_result

    - name: Check TEST 2
      assert:
        that:
          - test2.msg == "The \"get-config\" RPC executed successfully."
          - stat_result.stat.exists == True
      tags: [ test2 ]

    - name: Clean up TEST 2
      file:
        path: get_config.conf
        state: absent
#################

    - name: "Get Device Configuration in text"
      rpc:
        rpc: get-interface-information
        kwargs:
          interface_name: "lo0.0"
        format: text
      register: test3
      ignore_errors: True
      tags: [ test3 ]

    - name: Check TEST 3
      assert:
        that:
          - test3.msg == "The RPC executed successfully."
      tags: [ test3 ]

#################

    - name: "Execute multiple RPCs without any kwargs"
      rpc:
        rpcs:
          - "get-software-information"
          - "get-interface-information"
        dest: get_config.conf
      register: test4
      ignore_errors: True
      tags: [ test4 ]

    - name: Check TEST 4
      assert:
        that:
          - test4.results[0].msg == "The RPC executed successfully."
          - test4.results[1].msg == "The RPC executed successfully."
      tags: [ test4 ]

    - name: Clean up TEST 4
      file:
        path: get_config.conf
        state: absent

#################

    - name: "Execute multiple RPCs with multiple kwargs"
      rpc:
        rpcs:
          - "get-software-information"
          - "get-interface-information"
        kwargs:
          - {}
          - interface_name: "lo0.0"
      register: test5
      ignore_errors: True
      tags: [ test5 ]

    - name: Check TEST 5
      assert:
        that:
          - test5.results[0].msg == "The RPC executed successfully."
          - test5.results[1].msg == "The RPC executed successfully."
      tags: [ test5 ]

#################
    - name: Creates directory
      file:
        path: out
        state: directory

    - name: "Execute multiple RPCs with multiple kwargs and dest-dir"
      rpc:
        rpcs:
          - "get-software-information"
          - "get-interface-information"
        kwargs:
          - {}
          - interface_name: "lo0.0"
        dest_dir: "out"
      register: test6
      ignore_errors: True
      tags: [ test6 ]

    - name: Check get-interface-information.xml exists
      stat:
        path: "out/test_get-interface-information.xml"
      register: stat_result_1

    - name: Check get-software-information.xml exists
      stat:
        path: "out/test_get-software-information.xml"
      register: stat_result_2

    - name: Check TEST 6
      assert:
        that:
          - test6.results[0].msg == "The RPC executed successfully."
          - test6.results[1].msg == "The RPC executed successfully."
          - stat_result_1.stat.exists == True
          - stat_result_2.stat.exists == True
      tags: [ test6 ]

    - name: Clean up TEST 6
      file:
        path: out
        state: absent

#################
    - name: Get Device Configuration for interface
      rpc:
        rpc: get-config
        filter_xml: "<configuration><interfaces/></configuration>"
      register: test7
      ignore_errors: True
      tags: [ test7 ]

    - name: Check TEST 7
      assert:
        that:
          - test7.msg == "The \"get-config\" RPC executed successfully."
      tags: [ test7 ]

#################
    - name: "Execute wrong RPC to generate RPC error"
      rpc:
        rpcs:
          - "wrong-rpc"
      register: test8
      ignore_errors: True
      tags: [ test8 ]

    - name: Check TEST 8
      assert:
        that:
          - '"Unable to execute the RPC" in test8.msg'
      tags: [ test8 ]

#################
    - name: "Check configuration for errors"
      rpc:
        rpcs:
          - "open-configuration"
          - "load-configuration"
          - "close-configuration"
        attrs:
          - {}
          - action: 'set'
            format: 'text'
          - {}
        kwargs:
          - private: true
          - configuration_set: 'set system syslog file test1 any any'
          - {}
      register: test9
      tags: [ test9 ]

    - name: Check TEST 9
      debug:
        var: test9
      tags: [ test9 ]

    - name: Check TEST 9
      assert:
        that:
          - test9.results[0].msg == "The RPC executed successfully."
          - test9.results[1].msg == "The RPC executed successfully."
          - test9.results[2].msg == "The RPC executed successfully."
      tags: [ test9 ]

#################
    - name: "Check huge xml/text data"
      rpc:
        rpcs:
          - get-support-information
          - file-archive
        kwargs:
          - {}
          - destination: "support_info"
            source: /var/log/*
            compress: True
        formats: text
        timeout: 1200
        huge_tree: True
      register: test10
      tags: [ test10 ]

    - name: Check TEST 10
      assert:
        that:
          test10.results[0].msg == "The RPC executed successfully."
      tags: [ test10 ]

    - name: Check rollback info
      rpc:
        rpc: get-rollback-information
        kwargs:
          rollback: "3"
          compare: "2"
      register: test11
      tags: [ test11 ]

    - name: Check TEST 11
      assert:
        that:
          test11.msg == "The RPC executed successfully."
      tags: [ test11 ]

    - name: Check rollback info with boolean values
      rpc:
        rpc: get-rollback-information
        kwargs:
          allow_bool_values : "0"
          rollback: "1"
          compare: "0"
      register: test12
      tags: [ test12 ]

    - name: Check TEST 12
      assert:
        that:
          test12.msg == "The RPC executed successfully."
      tags: [ test12 ]
