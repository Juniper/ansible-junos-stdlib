#!/usr/bin/env python

# Copyright (c) 1999-2014, Juniper Networks Inc.
#               2014, Jeremy Schulman
#
# All rights reserved.
#
# License: Apache 2.0
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# * Neither the name of the Juniper Networks nor the
#   names of its contributors may be used to endorse or promote products
#   derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY Juniper Networks, Inc. ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL Juniper Networks, Inc. BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

DOCUMENTATION = '''
---
module: junos_zeroize
author: Jeremy Schulman, Juniper Networks
version_added: "1.0.0"
short_description: Erase all data, including configuration and log files, on a device running Junos OS.
description:
    - Execute the Junos OS B(request system zeroize) command to remove all
      configuration information on the Routing Engines and reset all key
      values on a device running Junos OS. The command removes all data files,
      including customized configuration and log files, by unlinking the files
      from their directories. The command also removes all user-created files
      from the system including all plain-text passwords, secrets, and
      private keys for SSH, local encryption, local authentication, IPsec,
      RADIUS, TACACS+, and SNMP.

      This command reboots the device and sets it to the factory default
      configuration. After the reboot, you must log in through the console
      as root in order to access the device.
requirements:
    - junos-eznc >= 1.2.2
    - junos-netconify >= 1.0.1, when using the I(console) option
options:
    host:
        description:
            - Set to {{ inventory_hostname }}
        required: false
    user:
        description:
            - Login username
        required: false
        default: $USER
    passwd:
        description:
            - Login password
        required: false
        default: assumes ssh-key active
    console:
        description:
            - SERIAL or TERMINAL-SERVER port setting, per use with
              the B(netconify) utility
        required: false
        default: None
        notes:
            - ex: "--telnet=termserv101,2000"
    zeroize:
        description:
            - Safety mechanism. You B(MUST) set this to 'zeroize'.
        required: yes
        default: None
    logfile:
        description:
            - Path on the local server where the progress status is logged
              for debugging purposes
        required: false
        default: None
    port:
        description:
            - port number to use when connecting to the device
        required: false
        default: 830
    ssh_private_key_file:
        description:
            - This can be used if you need to provide a private key rather than
              loading the key into the ssh-key-ring/environment.  if your
              ssh-key requires a password, then you must provide it via
              **passwd**
        required: false
        default: None
    mode:
        description:
            - mode of console connection (telnet/serial). If mode is not
              provided SSH connection is used.
        required: false
        default: None
notes:
    - You B(MUST) either use the I(host) option or the I(console) option to designate
      how the device is accessed.
'''

EXAMPLES = '''
- junos_zeroize:
    host={{ inventory_hostname }}
    zeroize="zeroize"

# over console server connection using PyEZ >= 2.0
- junos_zeroize:
    host={{ inventory_hostname }}
    zeroize="zeroize"
    port=7011
    mode="telnet"
'''

import os
import logging
from distutils.version import LooseVersion


def main():
    module = AnsibleModule(
        argument_spec=dict(
            zeroize=dict(required=True, default=None),  # must be set to 'zeroize'
            host=dict(required=False, default=None),    # host or ipaddr
            console=dict(required=False, default=None),     # param to netconify
            user=dict(required=False, default=os.getenv('USER')),
            passwd=dict(required=False, default=None, no_log=True),
            logfile=dict(required=False, default=None),
            port=dict(required=False, default=830),
            ssh_private_key_file=dict(required=False, default=None),
            mode=dict(required=False, default=None)
        ),
        supports_check_mode=False)

    args = module.params

    if args['zeroize'] != 'zeroize':
        results = dict(changed=False, failed=True)
        results['msg'] = "You must set 'zeroize=zeroize' ({0})".format(args['zeroize'])
        module.exit_json(**results)
        #
        # ! UNREACHABLE

    results = {}

    logfile = module.params['logfile']
    if logfile is not None:
        logging.basicConfig(filename=logfile, level=logging.INFO,
                            format='%(asctime)s:%(name)s:%(message)s')
        logging.getLogger().name = 'NETCONIFY:' + module.params['host']

        def log_notify(self, event, message):
            logging.info("%s:%s" % (event, message))
        use_notifier = log_notify
    else:
        def silent_notify(self, event, message):
            pass
        use_notifier = silent_notify

    if args.get('console') is None:
        # via NETCONF
        try:
            from jnpr.junos import Device
            from jnpr.junos.version import VERSION
            if not LooseVersion(VERSION) >= LooseVersion('1.2.2'):
                module.fail_json(msg='junos-eznc >= 1.2.2 is required for this module')
        except ImportError as ex:
            module.fail_json(msg='ImportError: %s' % ex.message)

        if args['mode'] is not None and LooseVersion(VERSION) < LooseVersion('2.0.0'):
            module.fail_json(msg='junos-eznc >= 2.0.0 is required for console connection')

        dev = Device(args['host'], user=args['user'], password=args['passwd'],
                     port=args['port'], ssh_private_key_file=args['ssh_private_key_file'],
                     mode=args['mode'], gather_facts=False)
        try:
            use_notifier(None, 'LOGIN', 'host={0}'.format(args['host']))
            dev.open()
            use_notifier(None, 'LOGIN', 'OK')
        except Exception as err:
            msg = 'unable to connect to {0}: {1}'.format(args['host'], str(err))
            module.fail_json(msg=msg)
            # --- UNREACHABLE ---

        use_notifier(None, 'ZEROIZE', 'invoking command')
        dev.cli('request system zeroize')
        results['changed'] = True
        # no close, we're done after this point.
    else:
        try:
            from netconify.cmdo import netconifyCmdo
            from netconify.constants import version
            if not LooseVersion(version) >= LooseVersion('1.0.1'):
                module.fail_json(msg='junos-netconify >= 1.0.1 is required for this module')
        except ImportError:
            module.fail_json(msg='junos-netconify >= 1.0.1 is required for this module')
        nc_args = []
        nc_args.append(args['console'])
        nc_args.append('--zeroize')
        if args['user'] is not None:
            nc_args.append('--user=' + args['user'])
        if args['passwd'] is not None:
            nc_args.append('--passwd=' + args['passwd'])

        try:
            nc = netconifyCmdo(notify=use_notifier)
            nc.run(nc_args)
        except Exception as err:
            module.fail_json(msg=str(err))
        results['changed'] = True

    # indicate done in the logfile and return results
    use_notifier(None, 'DONE', 'OK')
    module.exit_json(**results)

from ansible.module_utils.basic import *

if __name__ == '__main__':
    main()
