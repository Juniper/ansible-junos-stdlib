#!/usr/bin/env python

# Copyright (c) 1999-2015, Juniper Networks Inc.
#               2014, Jeremy Schulman
#               2015, Rick Sherman
#
# All rights reserved.
#
# License: Apache 2.0
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# * Neither the name of the Juniper Networks nor the
#   names of its contributors may be used to endorse or promote products
#   derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY Juniper Networks, Inc. ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL Juniper Networks, Inc. BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

DOCUMENTATION = '''
---
module: junos_rollback
author: Rick Sherman, Juniper Networks
version_added: "1.2.0"
short_description: Rollback configuration of device
description:
    - Rollback the configuration of a device running Junos
requirements:
    - junos-eznc >= 1.2.2
options:
    host:
        description:
            - Set to {{ inventory_hostname }}
        required: true
    user:
        description:
            - Login username
        required: false
        default: $USER
    passwd:
        description:
            - Login password
        required: false
        default: assumes ssh-key active
    port:
        description:
            - TCP port number to use when connecting to the device
        required: false
        default: 830
    logfile:
        description:
            - Path on the local server where the progress status is logged
              for debugging purposes
        required: false
        default: None
    rollback:
        description:
            - The rollback id value [0-49]
        required: true
        default: None
    comment:
        description:
            - Provide a comment to the commit of the configuration
        required: false
        default: None
    confirm:
        description:
            - Provide a confirm in minutes to the commit of the configuration
        required: false
        default: None
    diffs_file:
        description:
            - Path to the file where any diffs will be written
        required: false
        default: None
'''

EXAMPLES = '''
- junos_rollback:
   host: "{{ inventory_hostname }}"
   logfile=rollback.log
   diffs_file=rollback.diff
   rollback=1
   comment="Rolled back by Ansible"
   confirm=5
'''
from distutils.version import LooseVersion
import logging

try:
    from jnpr.junos import Device
    from jnpr.junos.version import VERSION
    from jnpr.junos.utils.config import Config
    from jnpr.junos.exception import CommitError, LockError, UnlockError, RpcError
    if not LooseVersion(VERSION) >= LooseVersion('1.2.2'):
        HAS_PYEZ = False
    else:
        HAS_PYEZ = True
except ImportError:
    HAS_PYEZ = False


def main():

    module = AnsibleModule(
        argument_spec=dict(host=dict(required=True, default=None),  # host or ipaddr
            user=dict(required=False, default=os.getenv('USER')),
            passwd=dict(required=False, default=None),
            port=dict(required=False, default=830),
            logfile=dict(required=False, default=None),
            rollback=dict(required=True, default=None),
            comment=dict(required=False, default=None),
            confirm=dict(required=False, default=None),
            diffs_file=dict(required=False, default=None)
            ssh_private_key_file=dict(required=False, default=None)
        ),
        supports_check_mode=True)

    if not HAS_PYEZ:
        module.fail_json(msg='junos-eznc >= 1.2.2 is required for this module')

    args = module.params
    in_check_mode = module.check_mode

    results = dict(changed=False)

    logfile = args['logfile']
    if logfile is not None:
        logging.basicConfig(filename=logfile, level=logging.INFO,
                            format='%(asctime)s:%(name)s:%(message)s')
        logging.getLogger().name = 'CONFIG:' + args['host']

    rb_id = int(args['rollback'])
    if not 0 <= rb_id <= 49:
        msg = "Rollback must be an integer [0-49]"
        logging.error(msg)
        module.fail_json(msg=msg)

    logging.info("connecting to host: {0}@{1}:{2}".format(args['user'], args['host'], args['port']))

    try:
        dev = Device(args['host'], user=args['user'], password=args['passwd'],
            port=args['port'], ssh_private_key_file=args['ssh_private_key_file'])
        dev.open(gather_facts=False)
    except Exception as err:
        msg = 'unable to connect to {0}: {1}'.format(args['host'], str(err))
        logging.error(msg)
        module.fail_json(msg=msg)
        # --- UNREACHABLE ---

    try:
        cu = Config(dev)

        logging.info("taking lock")
        cu.lock()

        logging.info("Rolling back to: {0}".format(rb_id))
        cu.rollback(rb_id=rb_id)

        diff = cu.diff()
        if diff is not None:
            diffs_file = args['diffs_file']
            if diffs_file is not None:
                try:
                    f = open(diffs_file, 'w')
                    f.write(diff)
                    f.close()
                except IOError as (errno, strerror):
                    msg = "Problem with diffs_file {0}: ".format(diffs_file)
                    msg += "I/O Error: ({0}): {1}".format(errno, strerror)
                    logging.error(msg)
                except:
                    msg = "Problem with diffs_file {0}: ".format(diffs_file)
                    msg += "Unexpected error:", sys.exc_info()[0]
                    logging.error(msg)

        if (in_check_mode):
            logging.info("doing a commit-check, please be patient")
            cu.commit_check()
        else:
            logging.info("committing change, please be patient")
            opts = {}
            if args['comment'] is not None:
                opts['comment'] = args['comment']
            if args['confirm'] is not None:
                opts['confirm'] = args['confirm']

            cu.commit(**opts)
            results['changed'] = True
            logging.info("change completed")

        logging.info("unlocking")
        cu.unlock()

    except LockError as err:
        msg = 'Unable to lock configuration - will not rollback: {0}'.format(str(err))
        logging.error(msg)
        dev.close()
        module.fail_json(msg=msg)

    except UnlockError as err:
        msg = 'Unable to unlock configuration - commit should succeed: {0}'.format(str(err))
        logging.error(msg)
        dev.close()
        module.fail_json(msg=msg)

    except CommitError as err:
        msg = 'Unable to commit: {0}'.format(str(err))
        logging.error(msg)
        dev.close()
        module.fail_json(msg=msg)

    except (ValueError, RpcError) as err:
        msg = 'Unable to rollback: {0}'.format(str(err))
        logging.error(msg)
        dev.close()
        module.fail_json(msg=msg)

    except Exception as err:
        msg = 'Uncaught exception - please report: {0}'.format(str(err))
        logging.error(msg)
        dev.close()
        module.fail_json(msg=msg)

    dev.close()

    module.exit_json(**results)

from ansible.module_utils.basic import *
main()
