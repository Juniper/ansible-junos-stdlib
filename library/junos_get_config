#!/usr/bin/env python

# Copyright (c) 1999-2015, Juniper Networks Inc.
#               2014, Jeremy Schulman
#               2015, Rick Sherman
#
# All rights reserved.
#
# License: Apache 2.0
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# * Neither the name of the Juniper Networks nor the
#   names of its contributors may be used to endorse or promote products
#   derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY Juniper Networks, Inc. ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL Juniper Networks, Inc. BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

DOCUMENTATION = '''
---
module: junos_get_config
author: Rick Sherman, Juniper Networks
version_added: "1.2.0"
short_description: Retrieve configuration of device
description:
    - Retrieve the configuration of a device running Junos and save it to a file.
      B(Note) unicode chars will be converted to '??' as also done in PyEZ
requirements:
    - junos-eznc >= 1.2.2
options:
    host:
        description:
            - Set to {{ inventory_hostname }}
        required: true
    user:
        description:
            - Login username
        required: false
        default: $USER
    passwd:
        description:
            - Login password
        required: false
        default: assumes ssh-key active
    port:
        description:
            - port number to use when connecting to the device
        required: false
        default: 830
    ssh_private_key_file:
        description:
            - This can be used if you need to provide a private key rather than
              loading the key into the ssh-key-ring/environment.  if your
              ssh-key requires a password, then you must provide it via
              **passwd**
        required: false
        default: None
    mode:
        description:
            - mode of console connection (telnet/serial). If mode is not
              provided SSH connection is used.
        required: false
        default: None
    logfile:
        description:
            - Path on the local server where the progress status is logged
              for debugging purposes
        required: false
        default: None
    dest:
        description:
            - Path to the local server directory where configuration will
              be saved.
        required: true
        default: None
    format:
        description:
            - text - configuration saved as text (curly-brace) format
            - xml - configuration saved as XML
        required: false
        choices: ['text','xml']
        default: 'text'
    options:
        description:
            - Additional options to pass to get_config. Refer
              to B(jnpr.junos.rpcmeta.get_config) for details.
        required: false
        default: None
    filter:
        description:
            - Defines heircachy of configuration to retrieve.  If omitted
              entire configuration is retrieved.  Format is slash notation
              ex I(groups/routeinst/routing-instances/ISP-1)
        required: false
        default: None
'''

EXAMPLES = '''
- junos_get_config:
   host: "{{ inventory_hostname }}"
   logfile: get_config.log
   dest: "{{ inventory_hostname }}.xml"
   format: xml
   filter: "interfaces"
   options: {inherit: inherit, groups: groups}

# over console server connection using PyEZ >= 2.0
- junos_get_config:
   host: "{{ inventory_hostname }}"
   logfile: get_config.log
   dest: "{{ inventory_hostname }}.xml"
   port: 7016
   mode: 'telnet'
   format: xml
'''
from distutils.version import LooseVersion
import logging
from lxml import etree

def main():

    module = AnsibleModule(
        argument_spec=dict(host=dict(required=True, default=None),  # host or ipaddr
                           user=dict(required=False, default=os.getenv('USER')),
                           passwd=dict(required=False, default=None, no_log=True),
                           port=dict(required=False, default=830),
                           ssh_private_key_file=dict(required=False, default=None),
                           mode=dict(required=False, default=None),
                           logfile=dict(required=False, default=None),
                           dest=dict(required=True, default=None),
                           format=dict(required=False, choices=['text', 'xml'], default='text'),
                           options=dict(required=False, default=None, type='dict'),
                           filter=dict(required=False, default=None)
                           ),
        supports_check_mode=True)

    args = module.params

    try:
        from jnpr.junos import Device
        from jnpr.junos.version import VERSION
        from jnpr.junos.exception import RpcError
        if not LooseVersion(VERSION) >= LooseVersion('1.2.2'):
            module.fail_json(msg='junos-eznc >= 1.2.2 is required for this module')
    except ImportError as ex:
        module.fail_json(msg='ImportError: %s' % ex.message)

    if args['mode'] is not None and LooseVersion(VERSION) < LooseVersion('2.0.0'):
        module.fail_json(msg='junos-eznc >= 2.0.0 is required for console connection.')

    results = {}

    logfile = args['logfile']
    if logfile is not None:
        logging.basicConfig(filename=logfile, level=logging.INFO,
                            format='%(asctime)s:%(name)s:%(message)s')
        logging.getLogger().name = 'CONFIG:' + args['host']

    logging.info("connecting to host: {0}@{1}:{2}".format(args['user'], args['host'], args['port']))

    try:
        dev = Device(args['host'], user=args['user'], password=args['passwd'],
                     port=args['port'], ssh_private_key_file=args['ssh_private_key_file'],
                     mode=args['mode'], gather_facts=False).open()
    except Exception as err:
        msg = 'unable to connect to {0}: {1}'.format(args['host'], str(err))
        logging.error(msg)
        module.fail_json(msg=msg)
        # --- UNREACHABLE ---

    try:
        options = args['options'] or {}
        options['format'] = args['format']

        filter_xml = None
        if args['filter']:
            flist = args['filter'].split('/')
            if flist[0] == 'configuration':
                filter_xml = etree.Element(flist.pop(0))
            else:
                filter_xml = etree.Element('configuration')
            current_element = filter_xml

            for f in flist:
                current_element = etree.SubElement(current_element,f)

            logging.info("Getting config with filter={0}".format(etree.tostring(filter_xml)))

        logging.info("Getting config with options={0}".format(options))

        config = dev.rpc.get_config(options=options, filter_xml=filter_xml)

        ## Compare existing file (if exists) with new output
        if args['format'] == 'text':
            newconf = config.text.encode('ascii', 'replace')
        elif args['format'] == 'xml':
            newconf = etree.tostring(config)

        oldconf = ''
        if os.path.isfile(args['dest']):
            with open(args['dest'], 'r') as confile:
                oldconf = confile.read()

        ## Correctly report 'changed' attribute
        if oldconf != newconf:
            results['changed'] = True
            if getattr(module,'_diff',False) is True:
                results['diff'] = dict(
                    before = oldconf,
                    after = newconf,
                    before_header = args['dest'],
                    after_header = args['host'],
                )

        ## if check_mode, then don't actually change the dest file!
        if not module.check_mode:
            with open(args['dest'], 'w') as confile:
                confile.write(newconf)

    except (ValueError, RpcError) as err:
        msg = 'Unable to get config: {0}'.format(str(err))
        logging.error(msg)
        dev.close()
        module.fail_json(msg=msg)

    except Exception as err:
        msg = 'Uncaught exception - please report: {0}'.format(str(err))
        logging.error(msg)
        dev.close()
        module.fail_json(msg=msg)

    dev.close()

    module.exit_json(**results)

from ansible.module_utils.basic import *

if __name__ == '__main__':
    main()
