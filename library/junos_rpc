#!/usr/bin/env python

# Copyright (c) 1999-2016, Juniper Networks Inc.
#               2016, Nitin Kumar
#
# All rights reserved.
#
# License: Apache 2.0
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# * Neither the name of the Juniper Networks nor the
#   names of its contributors may be used to endorse or promote products
#   derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY Juniper Networks, Inc. ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL Juniper Networks, Inc. BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

DOCUMENTATION = '''
---
module: junos_rpc
author: Nitin Kumar, Juniper Networks
version_added: "1.9"
short_description: run given rpc
description:
    - run given rpc
requirements:
    - junos-eznc >= 1.2.2
options:
    host:
        description:
            - Set to {{ inventory_hostname }}
        required: true
    user:
        description:
            - Login username
        required: false
        default: $USER
    passwd:
        description:
            - Login password
        required: false
        default: assumes ssh-key active
    port:
        description:
            - port number to use when connecting to the device
        required: false
        default: 830
    ssh_private_key_file:
        description:
            - This can be used if you need to provide a private key rather than
              loading the key into the ssh-key-ring/environment.  if your
              ssh-key requires a password, then you must provide it via
              **passwd**
        required: false
        default: None
    mode:
        description:
            - mode of console connection (telnet/serial). If mode is not
              provided SSH connection is used.
        required: false
        default: None
    logfile:
        description:
            - Path on the local server where the progress status is logged
              for debugging purposes. This option is used only with the
              I(console) option.
        required: false
        default: None
    rpc:
        description:
            - rpc to be executed
    kwargs:
        description:
            - params need to be passed to rpc
                kwargs="interface_name=em0" or kwargs="interface_name=em0,media=True"
                kwargs={interface_name:em0}
                kwargs={interface_name:em0,media:True}
                kwargs={interface_name:em0,media:True}
    filter_xml:
        description:
            - This options can be used with get-config rpc only,
              to retrieve specific config
    format:
        description:
            - text - configuration saved as text (curly-brace) format.
              xml - configuration saved as XML.
              json - configuration saved as json, supported only for devices >=14.2
              Also with this format, rpc_reply attribute can be used with results
        required: false
        choices: ['text','xml', 'json']
        default: 'xml'
    timeout:
        description:
            - Set the NETCONF RPC timeout. Set this value to accommodate Cli
              commands that might take longer than the default timeout interval.
              Setting to 0 will use the PyEZ default (30 seconds).
        required: false
        default: "0"
    dest:
        description:
            - Path to the local server directory where configuration will
              be saved.
        required: false
        default: None
'''

EXAMPLES = '''
# retrieve rpc response using NETCONF

- junos_rpc:
  host={{ inventory_hostname }}
  rpc=get-interface-information
  dest=get_interface_information.conf
  register=junos

- junos_rpc:
  host={{ inventory_hostname }}
  rpc=get-interface-information
  kwargs="interface_name=em0"
  format=xml/text/json
  dest=get_interface_information.conf
  register=junos

# Example to fetch device configuration
- name: Get Device Configuration
  junos_rpc:
    host={{ inventory_hostname }}
    rpc=get-config
    dest=get_config.conf

# Fetch configuration over console server connection using PyEZ >= 2.0
- name: Get Device Configuration
  junos_rpc:
    host={{ inventory_hostname }}
    port=7005
    mode='telnet'
    rpc=get-config
    dest=get_config.conf

# Example to fetch device configuration
- name: Get Device Configuration for interface
  junos_rpc:
    host={{ inventory_hostname }}
    rpc=get-config
    filter_xml="<configuration><interfaces/></configuration>"
    dest=get_config.conf
  register: junos

# Example to fetch configuration in json for >=14.2
# and use it with rpc_reply
- name: Get Device Configuration
  hosts: all
  roles:
    - Juniper.junos
  connection: local
  gather_facts: no
  tasks:
    - name: Get interface information
      junos_rpc:
        host: "{{ inventory_hostname }}"
        rpc: get-interface-information
        kwargs:
          interface_name: em0
          media: True
        format: json
        dest: get_interface_information.conf
      register: junos

    - name: Print configuration
      debug: msg="{{ junos.rpc_reply }}"
'''

import os
import sys
import logging
import re
from distutils.version import LooseVersion
from lxml import etree

def junos_rpc(module, dev):
    args = module.params
    logfile = args['logfile']
    if logfile is not None:
        logging.basicConfig(filename=logfile, level=logging.INFO,
                            format='%(asctime)s:%(name)s:%(message)s')
        logging.getLogger().name = 'JUNOS_RPC:' + args['host']

    results = {}
    kwargs = module.params['kwargs']
    rpc = module.params['rpc']
    results['rpc'] = rpc
    results['changed'] = False
    results['check_mode'] = module.check_mode
    logging.info("calling RPC: {0}".format(rpc))
    try:
        if kwargs is None:
            values = {}
        elif isinstance(kwargs, dict):
            values = kwargs
        elif re.search(r'\{.*\}', kwargs):
            try:
                # When data is provided like
                # kwargs:
                #   interface_name: em0
                #   media: True
                values = eval(kwargs)
            except:
                # In case when data is provided as below
                # kwargs={interface-name:em0,media:True}
                values = {k:v for k,v in re.findall(r'([\w-]+)\s?:\s?\'?\"?([\w\.-]+)\'?\"?',kwargs)}
        else:
            # kwargs="interface_name=em0,media=True"
            values = {k:v for k,v in re.findall('([\w-]+)=([\w\.\-\/]+)', kwargs)}
        for k,v in values.items():
            if v in ['True', 'true']:
                values[k]=True
            elif v in ['False', 'false']:
                values[k]=False
        results['kwargs'] = values
        if rpc in ['get-config', 'get_config']:
            filter_xml = module.params['filter_xml']
            if filter_xml is not None:
                filter_xml = etree.XML(filter_xml)
            values['format'] = args['format']
            rpc_reply = getattr(dev.rpc, rpc.replace('-','_'))(filter_xml, options=values)
        else:
            rpc_reply = getattr(dev.rpc, rpc.replace('-','_'))({'format':args['format']}, **values)
        if module.params['dest'] is not None:
            with open(module.params['dest'], 'w') as confile:
                if isinstance(rpc_reply, etree._Element):
                    if args.get('format') == 'text':
                        confile.write(rpc_reply.text)
                    else:
                        confile.write(etree.tostring(rpc_reply))
                else:
                    if args.get('format') == 'json':
                        results['rpc_reply'] = rpc_reply
                        confile.write(str(rpc_reply))
                    else:
                        confile.write(rpc_reply)

        results['changed'] = True
    except Exception as err:
       results['failed'] = True
       logging.error("unable to get rpc due to:{0}".format(err.message))
       raise err
    logging.info("rpc reponse recvd")
    return results

def main():
    module = AnsibleModule(
        argument_spec=dict(
            host=dict(required=True),
            logfile=dict(required=False, default=None),
            user=dict(required=False, default=os.getenv('USER')),
            passwd=dict(required=False, default=None, no_log=True),
            port=dict(required=False, default=830),
            ssh_private_key_file=dict(required=False, default=None),
            mode=dict(required=False, default=None),
            timeout=dict(required=False, type='int', default=0),
            rpc=dict(required=True, default=None),
            kwargs=dict(required=False, default=None),
            filter_xml=dict(required=False, default=None),
            format=dict(required=False, default='xml'),
            dest=dict(required=False, default=None)),
        supports_check_mode=False)

    m_args = module.params
    try:
        from jnpr.junos import Device
        from jnpr.junos.version import VERSION
        if not LooseVersion(VERSION) >= LooseVersion('1.2.2'):
            module.fail_json(msg='junos-eznc >= 1.2.2 is required for this module')
    except ImportError as ex:
        module.fail_json(msg='ImportError: %s' % ex.message)

    if m_args['mode'] is not None and LooseVersion(VERSION) < LooseVersion('2.0.0'):
        module.fail_json(msg='junos-eznc >= 2.0.0 is required for console connection.')
    # -----------
    # via NETCONF
    # -----------
    dev = Device(m_args['host'], user=m_args['user'], passwd=m_args['passwd'],
                 port=m_args['port'], ssh_private_key_file=m_args['ssh_private_key_file'],
                 mode=m_args['mode'], gather_facts=False)
    try:
        dev.open()
    except Exception as err:
        msg = 'unable to connect to {0}: {1}'.format(m_args['host'], str(err))
        module.fail_json(msg=msg)
        return

    ## Change default Timeout
    if m_args['timeout'] > 0:
        dev.timeout = m_args['timeout']

    results = junos_rpc(module, dev)

    dev.close()
    module.exit_json(**results)

from ansible.module_utils.basic import *

if __name__ == '__main__':
    main()
