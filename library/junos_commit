#!/usr/bin/env python

# Copyright (c) 1999-2015, Juniper Networks Inc.
#               2014, Jeremy Schulman
#               2015, Rick Sherman
#
# All rights reserved.
#
# License: Apache 2.0
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# * Neither the name of the Juniper Networks nor the
#   names of its contributors may be used to endorse or promote products
#   derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY Juniper Networks, Inc. ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL Juniper Networks, Inc. BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

DOCUMENTATION = '''
---
module: junos_commit
author: Rick Sherman, Juniper Networks
version_added: "1.2.0"
short_description: Execute commit on device
description:
    - Execute a Commit on a device running Junos independently of loading a configuration
requirements:
    - junos-eznc >= 1.2.2
options:
    host:
        description:
            - Set to {{ inventory_hostname }}
        required: true
    user:
        description:
            - Login username
        required: false
        default: $USER
    passwd:
        description:
            - Login password
        required: false
        default: assumes ssh-key active
    port:
        description:
            - port number to use when connecting to the device
        required: false
        default: 830
    ssh_private_key_file:
        description:
            - This can be used if you need to provide a private key rather than
              loading the key into the ssh-key-ring/environment.  if your
              ssh-key requires a password, then you must provide it via
              **passwd**
        required: false
        default: None
    mode:
        description:
            - mode of console connection (telnet/serial). If mode is not
              provided SSH connection is used.
        required: false
        default: None
    timeout:
        description:
            - Extend the NETCONF RPC timeout beyond the default value of
              30 seconds. Set this value to accommodate commits that
              might take longer than the default timeout interval.
        required: false
        default: "0"
    logfile:
        description:
            - Path on the local server where the progress status is logged
              for debugging purposes
        required: false
        default: None
    comment:
        description:
            - Provide a comment to the commit of the configuration
        required: false
        default: None
    confirm:
        description:
            - Provide a confirm in minutes to the commit of the configuration
        required: false
        default: None
    check:
        description:
            - Do a commit check
              Can be used to confirm a `commit confirmed` without performing an actual commit
        required: false
        default: None
'''

EXAMPLES = '''
- junos_commit:
   host: "{{ inventory_hostname }}"
   logfile=changes.log
   comment="Non load commit"

# over console server connection using PyEZ >= 2.0
- name: junos commit
  junos_commit:
    host={{ inventory_hostname }}
    port=7016
    mode='telnet'
    comment="commit with console connection via PyEZ"
'''

from distutils.version import LooseVersion
import logging

def main():

    module = AnsibleModule(
        argument_spec=dict(host=dict(required=True, default=None),  # host or ipaddr
                           user=dict(required=False, default=os.getenv('USER')),
                           passwd=dict(required=False, default=None, no_log=True),
                           port=dict(required=False, default=830),
                           ssh_private_key_file=dict(required=False, default=None),
                           mode=dict(required=False, default=None),
                           timeout=dict(required=False, default=0),
                           logfile=dict(required=False, default=None),
                           comment=dict(required=False, default=None),
                           confirm=dict(required=False, default=None),
                           check=dict(required=False, type='bool',
                                      choices=BOOLEANS, default=False)
                           ),
        supports_check_mode=True)

    args = module.params
    in_check_mode = module.check_mode
    results = dict(changed=False)

    try:
        from jnpr.junos import Device
        from jnpr.junos.version import VERSION
        from jnpr.junos.utils.config import Config
        from jnpr.junos.exception import CommitError, LockError, UnlockError
        if not LooseVersion(VERSION) >= LooseVersion('1.2.2'):
            module.fail_json(msg='junos-eznc >= 1.2.2 is required for this module')
    except ImportError as ex:
        module.fail_json(msg='ImportError: %s' % ex.message)

    if args['mode'] is not None and LooseVersion(VERSION) < LooseVersion('2.0.0'):
        module.fail_json(msg='junos-eznc >= 2.0.0 is required for console connection.')

    logfile = args['logfile']
    if logfile is not None:
        logging.basicConfig(filename=logfile, level=logging.INFO,
                            format='%(asctime)s:%(name)s:%(message)s')
        logging.getLogger().name = 'CONFIG:' + args['host']

    logging.info("connecting to host: {0}@{1}:{2}".format(args['user'], args['host'], args['port']))

    try:
        dev = Device(args['host'], user=args['user'], password=args['passwd'],
                     port=args['port'], ssh_private_key_file=args['ssh_private_key_file'],
                     mode=args['mode'], gather_facts=False).open()
    except Exception as err:
        msg = 'unable to connect to {0}: {1}'.format(args['host'], str(err))
        logging.error(msg)
        module.fail_json(msg=msg)
        # --- UNREACHABLE ---

    try:
        timeout = int(args['timeout'])
        if timeout > 0:
            dev.timeout = timeout

        cu = Config(dev)

        logging.info("taking lock")
        cu.lock()
        check = args['check']
        if (in_check_mode or check):
            logging.info("doing a commit-check, please be patient")
            cu.commit_check()
        else:
            logging.info("committing change, please be patient")
            opts = {}
            if args['comment'] is not None:
                opts['comment'] = args['comment']
            if args['confirm'] is not None:
                opts['confirm'] = args['confirm']

            cu.commit(**opts)
            results['changed'] = True
            logging.info("change completed")

        logging.info("unlocking")
        cu.unlock()

    except LockError as err:
        msg = 'Unable to lock configuration - will not commit: {0}'.format(str(err))
        logging.error(msg)
        dev.close()
        module.fail_json(msg=msg)

    except UnlockError as err:
        msg = 'Unable to unlock configuration - commit should succeed: {0}'.format(str(err))
        logging.error(msg)
        dev.close()
        module.fail_json(msg=msg)

    except CommitError as err:
        msg = 'Unable to commit: {0}'.format(str(err))
        logging.error(msg)
        dev.close()
        module.fail_json(msg=msg)

    except Exception as err:
        msg = 'Uncaught exception - please report: {0}'.format(str(err))
        logging.error(msg)
        dev.close()
        module.fail_json(msg=msg)

    dev.close()

    module.exit_json(**results)

from ansible.module_utils.basic import *

if __name__ == '__main__':
    main()
