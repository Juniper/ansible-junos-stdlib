#!/usr/bin/env python

# Copyright (c) 1999-2014, Juniper Networks Inc.
#               2014, Patrik Bok
#               2015, Rick Sherman
#
# All rights reserved.
#
# License: Apache 2.0
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# * Neither the name of the Juniper Networks nor the
#   names of its contributors may be used to endorse or promote products
#   derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY Juniper Networks, Inc. ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL Juniper Networks, Inc. BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

DOCUMENTATION = '''
---
module: junos_srx_cluster
author: Patrik Bok, Ashley Burston, Rick Sherman, Juniper Networks
version_added: "1.2.0"
short_description: Create an srx chassis cluster for cluster capable srx running Junos OS.
description:
    - Create an srx chassis cluster and reboot the device.
      The device must be capable of forming an srx cluster and have the correct
      cables installed.
requirements:
    - junos-eznc >= 1.2.2
options:
    host:
        description:
            - Set to {{ inventory_hostname }}
        required: true
    port:
        description:
            - port number to use when connecting to the device
        required: false
        default: 830
    ssh_private_key_file:
        description:
            - This can be used if you need to provide a private key rather than
              loading the key into the ssh-key-ring/environment.  if your
              ssh-key requires a password, then you must provide it via
              **passwd**
        required: false
        default: None
    mode:
        description:
            - mode of console connection (telnet/serial). If mode is not
              provided SSH connection is used.
        required: false
        default: None
    console:
        description:
            - SERIAL or TERMINAL-SERVER port setting, per use with
              the B(netconify) utility
        required: false
        default: None
        notes:
            - ex: "--telnet=termserv101,2000"
    user:
        description:
            - Login username
        required: false
        default: $USER
    passwd:
        description:
            - Login password
        required: false
        default: assumes ssh-key active
    cluster_enable:
        description:
            - yes/true - set device to cluster mode (specify cluster_id and node)
            - no/false - set device to stand alone mode (disable cluster mode)
        required: true
        choices: ['true','false','yes','no']
    cluster_id:
        description:
            - set to the cluster id , required for cluster_enable=YES
        required: false
        default: None
    node:
        description:
            - set to the node required (0 or 1)
        required: false
        default: None
    logfile:
        description:
            - Path on the local server where the progress status is logged
              for debugging purposes
        required: false
        default: None
'''

EXAMPLES = '''
-junos_srx_cluster:
  host={{ inventory_hostname }}
  console="--port={{ serial }}"
  user=rick
  passwd=password123
  cluster_enable=true
  logfile=cluster.log
  cluster_id={{ cluster_id }}
  node={{ node_id }}

-junos_srx_cluster:
  host={{ inventory_hostname }}
  user=rick
  passwd=password123
  cluster_enable=false
  logfile=cluster.log

# over console server connection using PyEZ >= 2.0
-junos_srx_cluster:
  host={{ inventory_hostname }}
  user=rick
  passwd=password123
  mode="telnet"
  port=7032
  cluster_enable=true
  logfile=cluster.log
'''

import os
import logging
from distutils.version import LooseVersion


def main():

    module = AnsibleModule(
        argument_spec=dict(
            host=dict(required=True, default=None),       # host or ipaddr
            user=dict(required=False, default=os.getenv('USER')),
            passwd=dict(required=False, default=None, no_log=True),
            port=dict(required=False, default=830),
            ssh_private_key_file=dict(required=False, default=None),
            mode=dict(required=False, default=None),
            console=dict(required=False, default=None),     # param to netconify
            cluster_enable=dict(required=True, type='bool', choices=BOOLEANS, default=None),
            cluster_id=dict(required=False, default=None),
            node=dict(required=False, default=None),
            logfile=dict(required=False, default=None)),
        supports_check_mode=False)

    args = module.params

    logfile = args['logfile']
    if logfile is not None:
        logging.basicConfig(filename=logfile, level=logging.INFO,
                            format='%(asctime)s:%(name)s:%(message)s')
        logging.getLogger().name = 'SRX_Cluster:' + args['host']

        def log_notify(self, event, message):
            logging.info("%s:%s" % (event, message))
        use_notifier = log_notify
    else:
        def silent_notify(self, event, message):
            pass
        use_notifier = silent_notify

    cluster = module.boolean(module.params['cluster_enable'])

    if args.get('console') is None:
        # via NETCONF
        logging.info('CONSOLE: no console parameter, using NETCONF')

        try:
            from jnpr.junos import Device
            from jnpr.junos.version import VERSION
            if not LooseVersion(VERSION) >= LooseVersion('1.2.2'):
                module.fail_json(msg='junos-eznc >= 1.2.2 is required for this module')
        except ImportError as ex:
            module.fail_json(msg='ImportError: %s' % ex.message)

        if args['mode'] is not None and LooseVersion(VERSION) < LooseVersion('2.0.0'):
            module.fail_json(msg='junos-eznc >= 2.0.0 is required for console connection')

        dev = Device(args['host'], user=args['user'], password=args['passwd'],
                     port=args['port'], ssh_private_key_file=args['ssh_private_key_file'],
                     mode=args['mode'], gather_facts=False)
        try:
            logging.info('LOGIN: host={0} port={1}'.format(args['host'], args['port']))
            dev.open()
            logging.info('LOGIN: OK')
        except Exception as err:
            msg = 'unable to connect to {0}:{1}: {2}'.format(args['host'], args['port'], str(err))
            logging.error(msg)
            module.fail_json(msg=msg)
            return
            # --- UNREACHABLE ---

        logging.info('SRX cluster: invoking command')
        if cluster is True:
            if (args['cluster_id'] and args['node']) is not None:
                do_it = dev.rpc.set_chassis_cluster_enable(cluster_id=args['cluster_id'], node=args['node'], reboot=True)
                logging.info('Device message: {0}'.format(do_it.getparent().findtext('.//output').strip()))
                results = {"changed": True, "reboot": True}
            else:
                msg = 'FAIL: Cluster and Node ID required with enable_cluster=YES'
                logging.error(msg)
                dev.close()
                results = {'changed': False, 'msg': msg}
                module.fail_json(**results)
        else:
            do_it = dev.rpc.set_chassis_cluster_disable(reboot=True, normalize=True)
            if do_it.tag == 'output':
                msg = do_it.text
            else:
                msg = do_it.findtext('.//message')
            logging.info('Device message: {0}'.format(msg))
            results = {'changed': True, 'reboot': True}
    else:
        # connection using NETCONIFY
        try:
            from netconify.cmdo import netconifyCmdo
            from netconify.constants import version
            if not LooseVersion(version) >= LooseVersion('1.0.1'):
                module.fail_json(msg='junos-netconify >= 1.0.1 is required for this module')
        except ImportError:
            module.fail_json(msg='junos-netconify >= 1.0.1 is required for this module')
        nc_args = []
        nc_args.append(args['console'])
        if cluster is True:
            if (args['cluster_id'] and args['node']) is not None:
                nc_args.append('--srx_cluster=' + args['cluster_id'] + ':' + args['node'])
            else:
                msg = 'FAIL: Cluster and Node ID required with enable_cluster=YES'
                logging.error(msg)
                results = {'changed': False, 'msg': msg}
                module.fail_json(**results)
        else:
            nc_args.append('--srx_cluster_disable')
        if args['user'] is not None:
            nc_args.append('--user=' + args['user'])
        if args['passwd'] is not None:
            nc_args.append('--passwd=' + args['passwd'])
        logging.info('Status: passing argument to netconify: {}'.format(nc_args))
        nc = netconifyCmdo(notify=use_notifier)
        nc.run(nc_args)
        results = {'changed': True, 'reboot': True}

    if cluster is True:
        logging.info('Cluster set...device rebooting... DONE')
    else:
        logging.info('Cluster disabled...device rebooting... DONE')
    module.exit_json(**results)

from ansible.module_utils.basic import *

if __name__ == '__main__':
    main()
